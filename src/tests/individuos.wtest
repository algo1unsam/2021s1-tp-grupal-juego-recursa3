import paqueteSecundario.individuos.*
import paqueteSecundario.objetos.*
import wollok.game.*
import paqueteSecundario.direcciones.*
describe "TEST DE INDIVIDUO"{
	const enemigo1= new Enemigo(vida = 100,ataque=10, position = game.at(5,6), orientacion = arriba,imagen = "enemigo/enemigoZombieChicoDerecha.png",categoria='enemigo')
	fixture{
		personaje.agregarObjeto(mochilaGrande)
		personaje.agregarObjeto(espadaChica)
		personaje.agregarObjeto(escudoGrande)
		game.onTick(1000,"Perseguir1",{true}) // Se hardcodea porque el enemigo en el juego se mueve y es necesario para testear.
	}
test "EL INDIVIDUO TIENE MOCHILA GRANDE Y DENTRO DE LA MOCHILA TIENE UNA ESPADA CHICA Y UN ESCUDO GRANDE"{
	assert.equals(mochilaGrande,personaje.mochila())
	assert.equals([espadaChica,escudoGrande],mochilaGrande.objetosGuardados())
}
test "EL INDIVIDUO DECIDE DEJAR UN OBJETO PORQUE LE OCUPA ESPACIO"{
	personaje.desecharObjeto(espadaChica)
	assert.equals([escudoGrande],mochilaGrande.objetosGuardados())
}

test "EL INDIVIDUO AL AGARRAR LA ESPADA GRANDE DESECHA LA ESPADA CHICA."{
	personaje.agregarObjeto(espadaGrande)
	assert.notThat(mochilaGrande.objetosGuardados().any({objeto=>objeto==espadaChica}))
	assert.notThat(personaje.mano1()==espadaChica)
	assert.that(mochilaGrande.objetosGuardados().any({objeto=>objeto==espadaGrande}))
	assert.that(personaje.mano1()==espadaGrande)
}

test "EL PERSONAJE AGARRA 3 LLAVES Y UTILIZA UNA, LE QUEDAN 2"{
	3.times({i=>personaje.agregarObjeto(llave)})
	personaje.utilizarObjeto(llave)
	assert.equals(2,personaje.cantidadLlaves())
	
}
test "EL PERSONAJE ATACA A UN RIVAL HASTA DEJARLO CON 50 VIDA"{
	personaje.position(game.at(5,5))
	personaje.orientacion(arriba)
	game.addVisual(personaje)
	game.addVisual(enemigo1)
	5.times({i=>personaje.atacar()})
	assert.equals(50,enemigo1.vida())		
}

test "EL PERSONAJE ATACA AL enemigo1 HASTA MATARLO"{
	personaje.position(game.at(5,5))
	personaje.orientacion(arriba)
	game.addVisual(personaje)
	game.addVisual(enemigo1)
	10.times({i=>personaje.atacar()})
	assert.equals(0,enemigo1.vida())	
	assert.notThat(game.hasVisual(enemigo1))
}
}