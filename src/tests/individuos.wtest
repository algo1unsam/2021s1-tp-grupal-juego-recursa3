import paqueteSecundario.individuos.*
import paqueteSecundario.objetos.*
import wollok.game.*
import paquetePrimario.configuracion.*
import paqueteSecundario.direcciones.*
import paqueteSecundario.estados.*
describe "TEST DE INDIVIDUO" {

	const enemigo1 = new Enemigo(vida = 2, ataque = 1, position = game.at(5, 6), orientacion = arriba, imagen = "enemigo/enemigoZombieChicoDerecha.png", categoria = 'enemigo')

	fixture {
		personaje.position(game.at(5, 5))
		personaje.orientacion(arriba)
		game.addVisual(enemigo1)
		game.addVisual(personaje)
		configuraciones.configurarColisiones()
		personaje.agregarObjeto(mochilaGrande)
		personaje.agregarObjeto(espadaChica)
		personaje.agregarObjeto(escudoGrande)
		personaje.agregarObjeto(llaveCofre2)
		personaje.agregarObjeto(llaveCofre)
		game.onTick(1000, "perseguir" + self, { true}) // Se hardcodea porque el enemigo en el juego se mueve y es necesario para testear.
		
	}

	test "EL INDIVIDUO TIENE MOCHILA GRANDE Y DENTRO DE LA MOCHILA TIENE UNA ESPADA CHICA Y UN ESCUDO GRANDE Y DOS LLAVES" {
		assert.equals(mochilaGrande, personaje.mochila())
		assert.equals([ espadaChica, escudoGrande, llaveCofre2,llaveCofre], mochilaGrande.objetosGuardados())
	}

	test "EL INDIVIDUO DECIDE DEJAR UN OBJETO PORQUE LE OCUPA ESPACIO" {
		personaje.desecharObjeto(espadaChica)
		assert.equals([ escudoGrande,llaveCofre2,llaveCofre], mochilaGrande.objetosGuardados())
	}

	test "EL INDIVIDUO AL AGARRAR LA ESPADA GRANDE DESECHA LA ESPADA CHICA." {
		personaje.agregarObjeto(espadaGrande)
		assert.notThat(mochilaGrande.objetosGuardados().any({ objeto => objeto == espadaChica}))
		assert.notThat(personaje.mano1() == espadaChica)
		assert.that(mochilaGrande.objetosGuardados().any({ objeto => objeto == espadaGrande}))
		assert.that(personaje.mano1() == espadaGrande)
	}

	test "EL personaje AGARRA 3 LLAVES MAS Y UTILIZA UNA, LE QUEDAN 4" {
		3.times({ i => personaje.agregarObjeto(llaveCofre)})
		personaje.utilizarObjeto(llaveCofre)
		assert.equals(4, personaje.cantidadLlaves())
	}

	test "EL personaje ATACA A UN RIVAL HASTA DEJARLO CON 50 VIDA" {
		personaje.atacar()
		assert.equals(1, enemigo1.vida())
	}

	test "EL personaje ATACA AL enemigo1 HASTA MATARLO" {
		2.times({ i => personaje.atacar()})
		assert.equals(0, enemigo1.vida())
		assert.notThat(game.hasVisual(enemigo1))
	}

	test "EL ENEMIGO ATACA personaje, Y ESTE QUEDA CON 5 PUNTOS DE VIDA." {
		personaje.moverse(arriba)
		enemigo1.teEncontro()
		assert.equals(personaje.position(), enemigo1.position())
		assert.equals(5, personaje.vida())
	}
	test "Me devuelve una llave"{
		assert.equals(llaveCofre,personaje.mochila().objetosGuardados().find({objeto => objeto.categoria()=='llave'}))
		
	}
}

